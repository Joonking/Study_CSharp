
책 보면서 중요 개념 따로 필기

문자열 -------------------------------------------------------------------------------------------------


문자열을 숫자로, 숫자를 문자열로

	parse() : 문자열 -> 숫자로
	C#은 정수계열 형식, 부동 소수점 형식 모두에게 Parse() 라는 메소드를 넣어놨음.
	이 메소드는 문자열을 넘겨주면 숫자로 반환해줌.

		ex >	string g = "1.2345"; 
				float h = float.Parse(g);

	ToString() : 숫자 -> 문자열로
	C#은 숫자 데이터 형식을 문자열로 바꾸는 방법을 마련해놨음.
	object로 부터 물려받은 ToString() 함수를 재정의했음.

		ex >	int a = 123;
				string b = a.ToString();


다양한 함수
	함수명                           설명
	IndexOf()                 현재 문자열 내에서 찾으려고 하는 지정된 문자 또는 문자열의 위치를 찾음.
	LastIndexOf()            현재 문자열 내에서 찾으려고 하는 지정된 문자 또는 문자열의 위치를 뒤에서 부터 찾음.
	StartsWith()              현재 문자열이 지정된 문자열로 시작하는지를 평가함.
	EndsWith()               현재 문자열이 지정된 문자열로 끝나는지를 평가함.
	Contains()                현재 문자열이 지정된 문자열을 포함하는지를 평가함.
	Replace()                 현재 문자열에서 지정된 문자열이 다른 지정된 문자열로 모두 바뀐 새 문자열을 반환함.

	ToLower()                현재 문자열의 모든 대문자를 소문자로 바꾼 새 문자열을 반환.
	ToUpper()                현재 문자열의 모든 소문자를 대문자로 바꾼 새 문자열을 반환
	Insert()                    현재 문자열의 지정된 위치에 지정된 문자열이 삽입된 새 문자열을 반환
	Remove()                 현재 문자열의 지정된 위치로부터 지정된 수만큼의 문자가 삭제된 새 문자열을 반환.
	Trim()                      현재 문자열의 앞/뒤에 있는 공백을 삭제한 새 문자열을 반환
	TrimStart()                현재 문자열의 앞에 있는 공백을 삭제한 새 문자열을 반환
	TrimEnd()                 현재 문자열의 뒤에 있는 공백을 삭제한 새 문자열을 반환

문자열 자르기
	SubString()				현재 문자열의 지정된 위치로부터 지정된 수만큼의 문자로 이루어진 새 문자열을 반환
		ex>	String greeting = "Good morning.";
				WriteLine(greeting.Substring(0, 5));        //"Good"
				WriteLine(greeting.Substring(5));			//"morning"

	Split()						지정된 문자를 기준으로 현재 문자열을 분리한 다음 분리한 문자열의 배열을 반환
		ex>   구분할것이 string이 아니고 문자라면
				greeting.Split(new char[]{' '}); 만 써주면됨

				//string일때는 두번째 매개변수 StringSplitOptions.None을 써야함
				//공백을 기준으로 string을 나누고 string 배열로 반환
				string[] arr = greeting.Split(new string[] {" "}, StringSplitOptions.None);		
				string[] arr = greeting.Split(" ", StringSplitOptions.None); 이렇게 해도됨.
				 //StringSplitOptions.RemoveEmptyEntries 옵션은 내용이 없는 공백이 연속으로 있을 경우 
				 //Split에 담을 배열에서 제거하겠다는 뜻임.


Format 서식관련

	Format() 메소드의 사용방법은 Console.WriteLine() 메소드와 똑같음.
	WriteLine 메소드가 내부적으로 string.Format() 메소드를 사용함.
	문자열 틀에 입력하는 {0}, {1} .. 을 서식항목(Format Item)이라고 함
	{첨자, 맞춤: 서식문자열} 로 이루어짐. 

	왼쪽/오른쪽 맞춤 서식
		{0,-10} : 왼쪽부터 문자를 채우는데 10칸안에 채움. 
		{0, 10} : 오른쪽부터 문자를 채우고 10칸안에 채움.

	숫자 서식화
		서식지정자         대상 서식             설명,예시
        D               10진수                입력된 수를 10진수로 서식화함.
                                                   WriteLine("{0:D}", 255);                                 //255
                                                   WriteLine("{0:D}", 0xFF);                                //255

        X               16진수                입력된 수를 16진수로 서식화함.
                                                    WriteLine("{0:X}", 255);                                 //0xFF
                                                    WriteLine("{0:X}", 0xFF);                                //0xFF

        N               콤마(,)로 묶어       입력된 수를 콤마로 구분하여 출력함 
                        표현한 수               WriteLine("{0:N}", 123456789);                       //123,456,789.00

        F               고정 소수점          입력된 수를 고정 소수점 형식으로 서식화함.
                                                    WriteLine("고정 소수점 : {0:F}", 123.45);           //123.45
        
        E               지수                    입력된 수를 지수 표기호 서식화함.
                                                    WriteLine("공학: {0:E}", 123.456789);               //1.234568E+002

	시간 서식
		서식지정자       대상서식        설명
		 y                   연도          - yy : 두자릿수 연도(2023-03-08 21:18:22 -> 23)
											- yyyy : 네 자릿수 연도(2023-03-08 21:18:22 -> 2023) 
 
		M                   월           - M : 한 자릿수 월(2023-03-08 21:18:22 -> 3)
											- MM : 두 자릿수 월(2023-03-08 21:18:22 -> 03)

		 d                    일           - d : 한 지릿수 일(2023-03-08 21:18:22 -> 8)
											- dd : 두 자릿수 일(2023-03-08 21:18:22 -> 08)

		 h                   시(1~12)     - h : 한 자릿수 시(2023-03-08 21:18:22 -> 9)
											 - hh 두 자릿수 시(2023-03-08 21:18:22 -> 09)

		H                   시(0~23)     - H : 한 자릿수 시(2023-03-08 21:18:22 -> 21)
											 - HH : 두 자릿수 시(2023-03-08 21:18:22 ->21)

		 m                   분           - m : 한 자릿수 분(2023-03-08 21:18:22 -> 18)
											- mm : 두 자릿수 분(2023-03-08 21:18:22 -> 18)
    
		 s                    초           - s : 한 자릿수 초(2023-03-08 21:18:22 -> 22)
											- ss : 두 자릿수 초(2023-03-08 21:18:22 -> 22)

		tt                  오전/오후      

		ddd                 요일          - ddd : 약식요일 -> 토
											- dddd : 전체요일 -> 토요일




연산자 ----------------------------------------------------------------------------------------------------


null 조건부 연산자

	?. 가 하는일은 객체의 멤버에 접근하기 전에 해당 객체가 null인지 검사하여 
	그 결과가 참이면 그 결과로 null을 반환하고
	그렇지 않은 경우에는 . 뒤에 지정된 멤버를 반환함.

	ex) 
	class Foo
	{
		public int member;
	}
	Foo foo = null;
	int? bar;
	if(foo == null)
		bar = null;
	else
		bar = foo.member;

	위의 코드를 ?.을 이용한다면

	bar = foo?.member       //foo 객체가 null이 아니면 member 필드에 접근하게 해줌.

	?[] 도 동일한  기능을 수행하는 연산자임. 비슷하지만 객체의 멤버 접근이 아니라
	배열과 같은 컬렉션 객체의 첨자를 이용한 참조에 사용됨.
	ex>
	ArrayList a = null;
	WriteLine($"{a?[0]}");


null 병합연산자
	null 병합 연산자 ??는 변수/객체의 null 검사를 간결하게 해줌
	ex> Console.WriteLine($"{num ?? 0}");   
		num이 null이면 오른쪽 0이 출력, null이 아니면 왼쪽 num의 값 출력

switch ---------------------------------------------------------------------------------------------------------

	식은 결과값을 만들 수 있는 연산자와 연산자의 조합임
	switch 식을 사용하면 분기를 거쳐 값을 내야하는 경우 사용하면 좋음. 코드가 간편해지고 break 도 없음.

	switch(score)               //switch 문
	{
		case 90:
			grade = "A";
			break;
		default:
			grade = "F";
	 }

	bool tf = true;

	string grade = score switch				//switch 식
	{
		90  => "A",         //case가 빠지고 => 을 쓰고 콤마로 구분함.
		80 when tf == true => "B+",             //케이스 가드 (추가적인 분기 처리)
		_    => "F"         //default 키워드는 _ 무시패턴으로 변경
	}






































